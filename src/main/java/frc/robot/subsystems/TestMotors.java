// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import frc.robot.commands.*;
import frc.robot.oi.ShuffleboardContent;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.motorcontrol.MotorController;
import edu.wpi.first.wpilibj.motorcontrol.PWMSparkMax;
import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

/**
 *
 */
public class TestMotors extends SubsystemBase {
    private CANSparkMax motorController1;
    private CANSparkMax motorController2;
    private CANSparkMax motorController3;
    private CANSparkMax motorController4;

    /**
    *
    */
    public TestMotors() {
        motorController1 = new CANSparkMax(10, MotorType.kBrushless);
        motorController1.setInverted(false);

        motorController2 = new CANSparkMax(13, MotorType.kBrushless);
        motorController2.setInverted(false);

        motorController3 = new CANSparkMax(54, MotorType.kBrushless);
        motorController3.setInverted(false);

        motorController4 = new CANSparkMax(57, MotorType.kBrushless);
        motorController4.setInverted(false);

        ShuffleboardContent.initMotorShuffleboard(motorController1);

    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void SetMotor1Speed(double speed) {
        motorController1.set(speed);
    }

    public double GetMotor1Position() {
        return motorController1.getEncoder().getPosition();
    }

    public double GetMotor1Velocity() {
        return motorController1.getEncoder().getVelocity();
    }
    
    public void SetMotor2Speed(double speed) {
        motorController2.set(speed);
    }

    public double GetMotor2Position() {
        return motorController2.getEncoder().getPosition();
    }

    public double GetMotor2Velocity() {
        return motorController2.getEncoder().getVelocity();
    }

    public void SetMotor3Speed(double speed) {
        motorController3.set(speed);
    }

    public double GetMotor3Position() {
        return motorController3.getEncoder().getPosition();
    }

    public double GetMotor3Velocity() {
        return motorController3.getEncoder().getVelocity();
    }

    public void SetMotor4Speed(double speed) {
        motorController4.set(speed);
    }

    public double GetMotor4Position() {
        return motorController4.getEncoder().getPosition();
    }

    public double GetMotor4Velocity() {
        return motorController4.getEncoder().getVelocity();
    }

}
