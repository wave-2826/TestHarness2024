// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Robot.

package frc.robot;

import edu.wpi.first.hal.FRCNetComm.tInstances;
import edu.wpi.first.hal.FRCNetComm.tResourceType;
import edu.wpi.first.hal.HAL;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.CommandScheduler;
import frc.robot.subsystems.TestMotors;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {

    private Command m_autonomousCommand;

    private RobotContainer m_robotContainer;
    private XboxController xboxController;

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {
        // Instantiate our RobotContainer.  This will perform all our button bindings, and put our
        // autonomous chooser on the dashboard.
        m_robotContainer = RobotContainer.getInstance();
        xboxController = m_robotContainer.getXboxController1();
        HAL.report(tResourceType.kResourceType_Framework, tInstances.kFramework_RobotBuilder);
        
    }

    /**
    * This function is called every robot packet, no matter the mode. Use this for items like
    * diagnostics that you want ran during disabled, autonomous, teleoperated and test.
    *
    * <p>This runs after the mode specific periodic functions, but before
    * LiveWindow and SmartDashboard integrated updating.
    */
    @Override
    public void robotPeriodic() {
        // Runs the Scheduler.  This is responsible for polling buttons, adding newly-scheduled
        // commands, running already-scheduled commands, removing finished or interrupted commands,
        // and running subsystem periodic() methods.  This must be called from the robot's periodic
        // block in order for anything in the Command-based framework to work.
        CommandScheduler.getInstance().run();
    }


    /**
    * This function is called once each time the robot enters Disabled mode.
    */
    @Override
    public void disabledInit() {
        // reset motor position on init
        System.out.println("DISABLED - RESET MOTOR POSITION");
        m_robotContainer.m_test.resetMotor1Position();
        m_robotContainer.m_test.resetMotor4Position();

    }

    @Override
    public void disabledPeriodic() {
        System.out.println("position: " + m_robotContainer.m_test.GetMotor4Position());
    }

    /**
    * This autonomous runs the autonomous command selected by your {@link RobotContainer} class.
    */
    @Override
    public void autonomousInit() {
        m_autonomousCommand = m_robotContainer.getAutonomousCommand();

        // schedule the autonomous command (example)
        if (m_autonomousCommand != null) {
            m_autonomousCommand.schedule();
        }
    }

    /**
    * This function is called periodically during autonomous.
    */
    @Override
    public void autonomousPeriodic() {
    }

    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (m_autonomousCommand != null) {
            m_autonomousCommand.cancel();
        }
    }

    /**
     * This function is called periodically during operator control.
     */
    @Override
    public void teleopPeriodic() {

        // Motor 1 -> Port 0, LY

        

// FLY WHEEL TESTING // Okay-Accuracy, Aggressive Shot, Furthest
        // m_robotContainer.m_test.SetMotor1Speed(.8);
        // m_robotContainer.m_test.SetMotor2Speed(-.4);
        // m_robotContainer.m_test.SetMotor3Speed(.7);
        // m_robotContainer.m_test.SetMotor4Speed(-.3);

//FLY WHEEL Modification // Most Consistant, High-Accuracy
        // m_robotContainer.m_test.SetMotor1Speed(.60);
        // m_robotContainer.m_test.SetMotor2Speed(-.55);
        // m_robotContainer.m_test.SetMotor3Speed(.45);
        // m_robotContainer.m_test.SetMotor4Speed(-.4);

//UP AND DOWN LAUNCH CLOSE .55
        // m_robotContainer.m_test.SetMotor1Speed(-.45); //upper
        // m_robotContainer.m_test.SetMotor3Speed(.90); //lower

//UP AND DOWN LAUNCH MID REAL
        // m_robotContainer.m_test.SetMotor1Speed(-.85); //upper
        // m_robotContainer.m_test.SetMotor3Speed(.85); //lower

//WITH PID CONTROL - VELOCITY
        // m_robotContainer.m_test.SetMotor1Velocity(-4340); // -> Shoots Well
        // m_robotContainer.m_test.SetMotor2Velocity(4340); // -> Shoots well

//WITH PID CONTROL - POSITION
        // m_robotContainer.m_test.SetMotor4Position(125);
        // m_robotContainer.m_test.SetMotor4Velocity(500);
        
        // double setPosition = 10;
        // m_robotContainer.m_test.SetMotor1Position(setPosition);
        // System.out.println("position: " + m_robotContainer.m_test.GetMotor1Position() + 
        //                     ", setpoint: " + setPosition);

        // double setPosition = 143.055667;
        // m_robotContainer.m_test.SetMotor4Position(setPosition);
        // System.out.println("position: " + m_robotContainer.m_test.GetMotor4Position() + 
        //                     ", setpoint: " + setPosition);
       
// WITH PID CONTROL - SMART VELOCITY
        m_robotContainer.m_test.SetMotor1SmartVelocity(4340);
        System.out.println("Velocity: " + m_robotContainer.m_test.GetMotor1Velocity());


        // System.out.println(
        //     "Top Left: " + m_robotContainer.m_test.GetMotor1Velocity() +
        //     ", Top Right: " + m_robotContainer.m_test.GetMotor2Velocity() + 
        //     ", Bottom Right: " + m_robotContainer.m_test.GetMotor3Velocity() +
        //     ", Bottom Right: " + m_robotContainer.m_test.GetMotor4Velocity()
        //     );

// WITH CONTROLLERS
        // double motor1Speed = xboxController.getLeftY();
        // if (Math.abs(motor1Speed) > 0.07) {
        //     m_robotContainer.m_test.SetMotor1Speed(motor1Speed);
        // } else {
        //     m_robotContainer.m_test.SetMotor1Speed(0);
        // }   

        // Motor 2 -> Port 0, RY
        // double motor2Speed = xboxController.getRightY();
        // if (Math.abs(motor2Speed) > 0.07) {
        //     m_robotContainer.m_test.SetMotor2Speed(motor2Speed);
        // } else {
        //     m_robotContainer.m_test.SetMotor2Speed(0);
        // }        

        // Motor 3 -> Set Speed
        // m_robotContainer.m_test.SetMotor3Speed(0.5);

        // Motor 4 -> Set Speed
        // m_robotContainer.m_test.SetMotor4Speed(0.5);

    }

    @Override
    public void testInit() {
        // Cancels all running commands at the start of test mode.
        CommandScheduler.getInstance().cancelAll();
    }

    /**
    * This function is called periodically during test mode.
    */
    @Override
    public void testPeriodic() {
    }

}